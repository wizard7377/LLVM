-- NOTE: A large portion of this file was generated by AI

module Test.Groups.Module

import Data.LLVM
import Data.LLVM.IR
import Data.LLVM.Write.Text.Encode
import Data.LLVM.Class
import Data.LLVM.IR.Builders.Math
import Test.Helper
import Data.LLVM.Write.Foreign
import Test.Groups.ModuleSetA
import Test.Groups.ModuleSetB
import Test.Groups.ModuleSetC
%hide Data.LLVM.Ops.Core.emptyModule

export
moduleTests : IO ()
moduleTests = do
    putStrLn "=== Running LLVM Module Tests ==="

    -- Test simple empty module
    debugTest "Empty Module" emptyModule

    -- Test module with global variables
    debugTest "Module with Global Variables" moduleWithGlobals
    
    -- Test module with simple function
    debugTest "Module with Simple Function" moduleWithSimpleFunction
    
    -- Test module with function that has operations
    debugTest "Module with Function MkLStatements" moduleWithMkLStatements
    
    -- Test complete module with multiple components
    debugTest "Complete Module" completeModule
    
    -- Test module with thread-local storage
    debugTest "Module with Thread-Local Storage" moduleWithTLS
    
    -- Test module with various calling conventions
    debugTest "Module with Calling Conventions" moduleWithCallingConventions
    
    -- Test module with vector operations
    debugTest "Module with Vector MkLStatements" moduleWithVectors
    
    -- Test module with control flow and phi nodes
    debugTest "Module with Control Flow" moduleWithControlFlow
    
    -- Test module with switch statements
    debugTest "Module with Switch Statements" moduleWithSwitch
    
    -- Test module with struct operations
    --debugTest "Module with Struct MkLStatements" moduleWithStructs
    
    -- Test module with aliases and IFuncs
    debugTest "Module with Aliases and IFuncs" moduleWithAliases
    
    -- Test module with exception handling
    -- debugTest "Module with Exception Handling" moduleWithExceptions
    
    -- Test module with atomic operations
    debugTest "Module with Atomic MkLStatements" moduleWithAtomics
    
    -- Test module with inline assembly
    debugTest "Module with Inline Assembly" moduleWithInlineAssembly
    
    -- Test module with debug information
    debugTest "Module with Debug Information" moduleWithDebugInfo
    
    -- Test module with complex nested structures
    debugTest "Module with Complex Nested Structures" moduleWithComplexTypes
    {- 
    -- Test module with function attributes
    debugTest "Module with Function Attributes" moduleWithAttributes
    
    -- Test module with edge cases
    debugTest "Module with Edge Cases" moduleWithEdgeCases
    
    -- Test module with memory management
    -- debugTest "Module with Memory Management" moduleWithMemoryManagement
    
    -- Test module with intrinsics
    debugTest "Module with Intrinsics" moduleWithIntrinsics
    
    -- Test module with garbage collection
    debugTest "Module with GC" moduleWithGC
    
    -- Test module with constants and constructors
    debugTest "Module with Constants" moduleWithConstants
    
    -- Test module with comdats and linkage
    debugTest "Module with Comdats" moduleWithComdats
    
    -- Stress test module
    debugTest "Module Stress Test" moduleStressTest
    -}    
    putStrLn "=== All Module Tests Completed ==="



    -- Test simple empty module
    debugFileTest "Empty Module" emptyModule

    -- Test module with global variables
    debugFileTest "Module with Global Variables" moduleWithGlobals
    
    -- Test module with simple function
    debugFileTest "Module with Simple Function" moduleWithSimpleFunction
    
    -- Test module with function that has operations
    debugFileTest "Module with Function MkLStatements" moduleWithMkLStatements
    
    -- Test complete module with multiple components
    debugFileTest "Complete Module" completeModule
    
    -- Test module with thread-local storage
    debugFileTest "Module with Thread-Local Storage" moduleWithTLS
    
    -- Test module with various calling conventions
    debugFileTest "Module with Calling Conventions" moduleWithCallingConventions
    
    -- Test module with vector operations
    debugFileTest "Module with Vector MkLStatements" moduleWithVectors
    
    -- Test module with control flow and phi nodes
    debugFileTest "Module with Control Flow" moduleWithControlFlow
    
    -- Test module with switch statements
    debugFileTest "Module with Switch Statements" moduleWithSwitch
    
    -- Test module with struct operations
    --debugFileTest "Module with Struct MkLStatements" moduleWithStructs
    
    -- Test module with aliases and IFuncs
    debugFileTest "Module with Aliases and IFuncs" moduleWithAliases
    
    -- Test module with exception handling
    -- debugFileTest "Module with Exception Handling" moduleWithExceptions
    
    -- Test module with atomic operations
    debugFileTest "Module with Atomic MkLStatements" moduleWithAtomics
    
    -- Test module with inline assembly
    debugFileTest "Module with Inline Assembly" moduleWithInlineAssembly
    
    -- Test module with debug information
    debugFileTest "Module with Debug Information" moduleWithDebugInfo
    
    -- Test module with complex nested structures
    debugFileTest "Module with Complex Nested Structures" moduleWithComplexTypes
    {- 
    -- Test module with function attributes
    debugFileTest "Module with Function Attributes" moduleWithAttributes
    
    -- Test module with edge cases
    debugFileTest "Module with Edge Cases" moduleWithEdgeCases
    
    -- Test module with memory management
    -- debugFileTest "Module with Memory Management" moduleWithMemoryManagement
    
    -- Test module with intrinsics
    debugFileTest "Module with Intrinsics" moduleWithIntrinsics
    
    -- Test module with garbage collection
    debugFileTest "Module with GC" moduleWithGC
    
    -- Test module with constants and constructors
    debugFileTest "Module with Constants" moduleWithConstants
    
    -- Test module with comdats and linkage
    debugFileTest "Module with Comdats" moduleWithComdats
    
    -- Stress test module
    debugFileTest "Module Stress Test" moduleStressTest

    -}



    -- Test simple empty module
    --debugCompile "EmptyModule" Test.Groups.Module.emptyModule

    -- Test module with global variables
    debugCompile "Module_with_Global_Variables" moduleWithGlobals
    
    -- Test module with simple function
    debugCompile "Module_with_Simple_Function" moduleWithSimpleFunction
    
    -- Test module with function that has operations
    debugCompile "Module_with_Function_MkLStatements" moduleWithMkLStatements
    
    -- Test complete module with multiple components
    debugCompile "Complete_Module" completeModule
    
    -- Test module with thread-local storage
    debugCompile "Module_with_Thread_Local_Storage" moduleWithTLS
    
    -- Test module with various calling conventions
    debugCompile "Module_with_Calling_Conventions" moduleWithCallingConventions
    
    -- Test module with vector operations
    debugCompile "Module_with_Vector_MkLStatements" moduleWithVectors
    
    -- Test module with control flow and phi nodes
    debugCompile "Module_with_Control_Flow" moduleWithControlFlow
    
    -- Test module with switch statements
    debugCompile "Module_with_Switch_Statements" moduleWithSwitch
    
    -- Test module with struct operations
    -- debugCompile "Module_with_Struct_MkLStatements" moduleWithStructs
    
    -- Test module with aliases and IFuncs
    debugCompile "Module_with_Aliases_and_IFuncs" moduleWithAliases
    
    -- Test module with exception handling
    -- debugCompile "Module_with_Exception_Handling" moduleWithExceptions
    
    -- Test module with atomic operations
    debugCompile "Module_with_Atomic_MkLStatements" moduleWithAtomics
    
    -- Test module with inline assembly
    debugCompile "Module_with_Inline_Assembly" moduleWithInlineAssembly
    
    -- Test module with debug information
    debugCompile "Module_with_Debug_Information" moduleWithDebugInfo
    
    -- Test module with complex nested structures
    debugCompile "Module_with_Complex_Nested_Structures" moduleWithComplexTypes
    {-
    -- Test module with function attributes
    debugCompile "Module_with_Function_Attributes" moduleWithAttributes
    
    -- Test module with edge cases
    debugCompile "Module_with_Edge_Cases" moduleWithEdgeCases
    
    -- Test module with memory management
    -- debugCompile "Module_with_Memory_Management" moduleWithMemoryManagement
    
    -- Test module with intrinsics
    debugCompile "Module_with_Intrinsics" moduleWithIntrinsics
    
    -- Test module with garbage collection
    debugCompile "Module_with_GC" moduleWithGC
    
    -- Test module with constants and constructors
    debugCompile "Module_with_Constants" moduleWithConstants
    
    -- Test module with comdats and linkage
    debugCompile "Module_with_Comdats" moduleWithComdats
    
    -- Stress test module
    debugCompile "Module_Stress_Test" moduleStressTest
    -}
    debugCompile "moduleWithMkLStatementsLifted" moduleWithMkLStatementsLifted
    debugCompile "moduleWithSwitchLifted" moduleWithSwitchLifted
    debugCompile "moduleWithIntrinsics" moduleWithIntrinsics
    putStr """
        \n\n\n
        === Starting Foriegn Compile Tests ===
        \n\n\n
    """


    -- Test simple empty module
    --encodeFCMTest' "EmptyModule" Test.Groups.Module.emptyModule

    -- Test module with global variables
    encodeFCMTest' "Module_with_Global_Variables" moduleWithGlobals
    
    -- Test module with simple function
    encodeFCMTest' "Module_with_Simple_Function" moduleWithSimpleFunction
    
    -- Test module with function that has operations
    encodeFCMTest' "Module_with_Function_MkLStatements" moduleWithMkLStatements
    
    -- Test complete module with multiple components
    encodeFCMTest' "Complete_Module" completeModule
    
    -- Test module with thread-local storage
    encodeFCMTest' "Module_with_Thread_Local_Storage" moduleWithTLS
    
    -- Test module with various calling conventions
    encodeFCMTest' "Module_with_Calling_Conventions" moduleWithCallingConventions
    
    -- Test module with vector operations
    encodeFCMTest' "Module_with_Vector_MkLStatements" moduleWithVectors
    
    -- Test module with control flow and phi nodes
    encodeFCMTest' "Module_with_Control_Flow" moduleWithControlFlow
    
    -- Test module with switch statements
    encodeFCMTest' "Module_with_Switch_Statements" moduleWithSwitch
    
    -- Test module with struct operations
    -- encodeFCMTest' "Module_with_Struct_MkLStatements" moduleWithStructs
    
    -- Test module with aliases and IFuncs
    encodeFCMTest' "Module_with_Aliases_and_IFuncs" moduleWithAliases
    
    -- Test module with exception handling
    -- encodeFCMTest' "Module_with_Exception_Handling" moduleWithExceptions
    
    -- Test module with atomic operations
    encodeFCMTest' "Module_with_Atomic_MkLStatements" moduleWithAtomics
    
    -- Test module with inline assembly
    encodeFCMTest' "Module_with_Inline_Assembly" moduleWithInlineAssembly
    
    -- Test module with debug information
    encodeFCMTest' "Module_with_Debug_Information" moduleWithDebugInfo
    
    -- Test module with complex nested structures
    encodeFCMTest' "Module_with_Complex_Nested_Structures" moduleWithComplexTypes
    {- 
    -- Test module with function attributes
    encodeFCMTest' "Module_with_Function_Attributes" moduleWithAttributes
    
    -- Test module with edge cases
    encodeFCMTest' "Module_with_Edge_Cases" moduleWithEdgeCases
    
    -- Test module with memory management
    -- encodeFCMTest' "Module_with_Memory_Management" moduleWithMemoryManagement
    
    -- Test module with intrinsics
    encodeFCMTest' "Module_with_Intrinsics" moduleWithIntrinsics
    
    -- Test module with garbage collection
    encodeFCMTest' "Module_with_GC" moduleWithGC
    
    -- Test module with constants and constructors
    encodeFCMTest' "Module_with_Constants" moduleWithConstants
    
    -- Test module with comdats and linkage
    encodeFCMTest' "Module_with_Comdats" moduleWithComdats
    
    -- Stress test module
    encodeFCMTest' "Module_Stress_Test" moduleStressTest
    -}
    putStrLn "=== All Foreign Compile Tests Completed ==="
